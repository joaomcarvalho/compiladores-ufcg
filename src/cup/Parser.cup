package com.ufcg.compiladores;

import java_cup.runtime.*;


parser code {:
:};


terminal PROGRAM, BEGIN, END, VARIABLE, FUNCTION, PROCEDURE, FOR;
terminal TO, DO;
terminal EQ, OR, AND, NOT, ADD, SUB, MUL, DIV, MOD, ASSIGN;
terminal BOOLEAN, INTEGER, STRING, ARRAY, OF, RANGE;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET;
terminal COMMA, COLON, SEMICOLON, DOT;
terminal IDENTIFIER;

non terminal root, program, body;
non terminal declarations, declaration, statements, statement;
non terminal variables, variable, type, index, identifiers, literal, opt_init;
non terminal function, procedure, opt_params, params, param;
non terminal for, attribuition, array, call, opt_arguments, arguments;
non terminal expressions, expression, exp0, exp1, exp2, exp3, exp4;

start with root;

root ::= program declarations body DOT;
program ::= PROGRAM IDENTIFIER SEMICOLON;
body ::= BEGIN statements END;

declarations ::= declarations declaration
	| /* empty */
	;

declaration ::= VARIABLE variables
	| function
	| procedure
	;

variables ::= variables variable 
	| variable
	;

variable ::= IDENTIFIER COMMA identifiers COLON type SEMICOLON
	| IDENTIFIER COLON type opt_init SEMICOLON;

type ::= IDENTIFIER
	| ARRAY OF type
	| ARRAY LEFT_BRACKET index RIGHT_BRACKET OF type
	;

index ::= IDENTIFIER
	| expression RANGE expression // expressões devem ser constantes
	;

opt_init ::= EQ expression // expressões devem ser constantes
	| /* empty */
	;

procedure ::= PROCEDURE IDENTIFIER opt_params SEMICOLON declarations BEGIN statements END SEMICOLON;

function ::= FUNCTION IDENTIFIER opt_params COLON IDENTIFIER SEMICOLON declarations BEGIN statements END SEMICOLON;

opt_params ::= LEFT_PARENTHESIS params RIGHT_PARENTHESIS
	| LEFT_PARENTHESIS RIGHT_PARENTHESIS
	| /* empty */
	;

params ::= params SEMICOLON param
	| param
	;

param ::= identifiers COLON IDENTIFIER
	| VARIABLE identifiers COLON IDENTIFIER
	;

identifiers ::= identifiers COMMA IDENTIFIER
	| IDENTIFIER
	;

array ::= IDENTIFIER LEFT_BRACKET expressions RIGHT_BRACKET;

literal ::= BOOLEAN
	| INTEGER
	| STRING
	;

statements ::= statements statement
	| /* empty */
	;

statement ::= attribuition
	| call SEMICOLON
	| for
	;

call ::= IDENTIFIER LEFT_PARENTHESIS opt_arguments RIGHT_PARENTHESIS;

opt_arguments ::= arguments
	| /* empty */
	;

arguments ::= arguments COMMA expression
	| expression
	;

attribuition ::= IDENTIFIER ASSIGN expression SEMICOLON
	| array ASSIGN expression SEMICOLON;

expressions ::= expressions COMMA expression
	| expression
	;

expression ::= exp0;

exp0 ::= exp0 EQ exp1
	| exp0 OR exp1
	| exp0 AND exp1
	| NOT exp1
	| exp1
	;
	
exp1 ::= exp1 ADD exp2
	| exp1 SUB exp2
	| exp2
	;
	
exp2 ::= exp2 MUL exp3
	| exp2 DIV exp3
	| exp2 MOD exp3
	| exp3
	;
	
exp3 ::= ADD exp3
	| SUB exp3
	| exp4
	;
	
exp4 ::= IDENTIFIER
	| LEFT_PARENTHESIS exp0 RIGHT_PARENTHESIS
	| literal
	| call
	| array
	;

for ::= FOR IDENTIFIER ASSIGN literal TO literal DO BEGIN statements END SEMICOLON
	|   FOR IDENTIFIER ASSIGN IDENTIFIER TO literal DO BEGIN statements END SEMICOLON
	|	FOR IDENTIFIER ASSIGN IDENTIFIER TO IDENTIFIER DO BEGIN statements END SEMICOLON
	;
	